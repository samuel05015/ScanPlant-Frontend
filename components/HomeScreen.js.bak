import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacit                 <TouchableOpacity 
            style={styles.assistantButton}
            onPress={openChat}
          >
            <View style={styles.assistantIconBackground}>
              <Text style={styles.assistantIcon}>ü§ñ</Text>
            </View>
            <Text style={styles.assistantText}>IA Bot√¢nica</Text>
          </TouchableOpacity>ableOpacity 
            style={styles.assistantButton}
            onPress={openChat}
          >
            <View style={styles.assistantIconBackground}>
              <Text style={styles.assistantIcon}>ü§ñ</Text>
            </View>
            <Text style={styles.assistantText}>IA Bot√¢nica</Text>
          </TouchableOpacity>ollView,
  SafeAreaView,
  StatusBar,
  Modal,
  TextInput,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  Animated,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { Colors, Typography, Spacing, BorderRadius, Shadows, BaseStyles, Icons } from './styles/DesignSystem';
import { Feather } from '@expo/vector-icons';
import ShimmerMessage from './ShimmerMessage';

// Respostas pr√©-definidas para perguntas comuns sobre plantas
const PLANT_RESPONSES = {
  default: "Ol√°! Sou o assistente virtual do ScanPlant. Como posso ajudar com suas plantas hoje?",
  greeting: ["Ol√°! Como posso ajudar?", "Oi! Precisa de ajuda com plantas?", "Ol√°, sou o assistente do ScanPlant!"],
  notFound: "Desculpe, n√£o tenho informa√ß√µes espec√≠ficas sobre isso. Tente perguntar sobre rega, luz, plantio ou cuidados gerais com plantas.",
  water: ["A maioria das plantas precisa ser regada quando a camada superior do solo estiver seca.", "Evite encharcar as ra√≠zes."],
  light: ["A maioria das plantas de interior precisa de luz indireta brilhante.", "Luz solar direta pode queimar as folhas de algumas plantas."],
  soil: ["Um bom solo deve ter drenagem adequada.", "Adicionar perlita ou areia pode ajudar a melhorar a drenagem."],
  problems: ["Folhas amarelando geralmente indicam excesso de √°gua ou falta de nutrientes.", "Pontas marrons nas folhas podem indicar ar muito seco."]
};

// Fun√ß√£o para gerar resposta com base no texto da pergunta
const generateResponse = (question) => {
  const q = question.toLowerCase();
  
  if (q.includes('ol√°') || q.includes('oi')) return PLANT_RESPONSES.greeting[Math.floor(Math.random() * PLANT_RESPONSES.greeting.length)];
  if (q.includes('√°gua') || q.includes('regar')) return PLANT_RESPONSES.water[Math.floor(Math.random() * PLANT_RESPONSES.water.length)];
  if (q.includes('sol') || q.includes('luz')) return PLANT_RESPONSES.light[Math.floor(Math.random() * PLANT_RESPONSES.light.length)];
  if (q.includes('solo') || q.includes('terra')) return PLANT_RESPONSES.soil[Math.floor(Math.random() * PLANT_RESPONSES.soil.length)];
  if (q.includes('problema') || q.includes('doen√ßa')) return PLANT_RESPONSES.problems[Math.floor(Math.random() * PLANT_RESPONSES.problems.length)];
  
  return PLANT_RESPONSES.notFound;
};

const HomeScreen = () => {
  const navigation = useNavigation();
  const [chatVisible, setChatVisible] = useState(false);
  const [messages, setMessages] = useState([
    { id: '1', text: "Ol√°! üëã Sou a IA Bot√¢nica avan√ßada do ScanPlant. Posso ajudar com:\n\nüîç Identifica√ß√£o de plantas\nüå± Dicas de cultivo e cuidados\nüåø Solu√ß√£o de problemas com suas plantas\nüíß Orienta√ß√µes sobre rega e ilumina√ß√£o\n\nComo posso ajudar voc√™ hoje?", sender: 'bot' }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const flatListRef = useRef(null);

  const goToPlantGallery = () => {
    navigation.navigate('PlantGallery');
  };

  const goToPhotoScreen = () => {
    navigation.navigate('PhotoScreen');
  };

  const goToSearchScreen = () => {
    navigation.navigate('SearchScreen');
  };

  const goToProfileSettings = () => {
    navigation.navigate('ProfileSettings');
  };
  
  const openChat = () => setChatVisible(true);
  const closeChat = () => setChatVisible(false);
  
  // Fun√ß√£o para calcular o tempo de digita√ß√£o baseado no tamanho da resposta
  const calculateTypingTime = (text) => {
    // Base de 500ms + 20ms por caractere
    const baseTime = 500;
    const charTime = 20;
    return Math.min(baseTime + (text.length * charTime), 3000); // M√°ximo de 3 segundos
  };
  
  const sendMessage = () => {
    if (inputText.trim() === '') return;
    
    // Adiciona a mensagem do usu√°rio
    const userMessage = { id: Date.now().toString(), text: inputText, sender: 'user' };
    setMessages(currentMessages => [...currentMessages, userMessage]);
    
    // Limpa o campo de texto
    setInputText('');
    
    // Ativa o efeito de digita√ß√£o
    setIsTyping(true);
    
    // Gera a resposta
    const response = generateResponse(inputText);
    
    // Calcula tempo de digita√ß√£o baseado no tamanho da resposta
    const typingTime = calculateTypingTime(response);
    
    // Simula o tempo de digita√ß√£o antes de mostrar a resposta
    setTimeout(() => {
      // Desativa o efeito de digita√ß√£o
      setIsTyping(false);
      
      // Adiciona a resposta do bot
      const botResponse = { id: (Date.now() + 1).toString(), text: response, sender: 'bot' };
      setMessages(currentMessages => [...currentMessages, botResponse]);
      
      // Rola para o final da lista
      if (flatListRef.current) {
        flatListRef.current.scrollToEnd({ animated: true });
      }
    }, typingTime);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.background.primary} />
      
      {/* Header com logo, assistente bot√¢nico e bot√£o de perfil */}
      <View style={styles.header}>
        <Image
          source={require('../assets/imagemlogotcc.png')}
          style={styles.smallLogo}
          resizeMode="contain"
        />
        
        <View style={styles.headerActions}>
          <TouchableOpacity 
            style={styles.assistantButton}
            onPress={openChat}
          >
            <View style={styles.assistantIconBackground}>
              <Text style={styles.assistantIcon}>ÔøΩ</Text>
            </View>
            <Text style={styles.assistantText}>Especialista</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.profileButton}
            onPress={goToProfileSettings}
          >
            <Text style={styles.profileIcon}>{Icons.settings}</Text>
          </TouchableOpacity>
        </View>
      </View>
      
      {/* Modal do Chat do Assistente Bot√¢nico */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={chatVisible}
        onRequestClose={closeChat}
      >
        <SafeAreaView style={styles.modalContainer}>
          <KeyboardAvoidingView
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            style={styles.keyboardAvoid}
          >
            <View style={styles.chatContainer}>
              <View style={styles.chatHeader}>
                <View style={styles.headerContent}>
                  <View style={styles.chatAvatarContainer}>
                    <Text style={styles.plantIcon}>ÔøΩ</Text>
                  </View>
                  <View>
                    <Text style={styles.headerTitle}>Especialista Bot√¢nico</Text>
                    <Text style={styles.headerSubtitle}>Seu consultor de plantas pessoal</Text>
                  </View>
                </View>
                <TouchableOpacity style={styles.closeButton} onPress={closeChat}>
                  <Feather name="x" size={24} color={Colors.text.secondary} />
                </TouchableOpacity>
              </View>

              <FlatList
                ref={flatListRef}
                data={messages}
                renderItem={({ item }) => (
                  <View style={[
                    styles.messageBubble,
                    item.sender === 'user' ? styles.userMessage : styles.botMessage
                  ]}>
                    <Text style={[
                      styles.messageText,
                      item.sender === 'user' ? styles.userMessageText : styles.botMessageText
                    ]}>
                      {item.text}
                    </Text>
                  </View>
                )}
                keyExtractor={item => item.id}
                contentContainerStyle={styles.messageList}
                inverted={false}
                showsVerticalScrollIndicator={false}
                onContentSizeChange={() => flatListRef.current?.scrollToEnd({animated: true})}
              />
              
              {isTyping && (
                <View style={{paddingHorizontal: Spacing.lg}}>
                  <ShimmerMessage />
                </View>
              )}

              <View style={styles.inputContainer}>
                <TextInput
                  style={styles.textInput}
                  placeholder="Digite sua pergunta..."
                  value={inputText}
                  onChangeText={setInputText}
                  multiline
                  returnKeyType="send"
                  onSubmitEditing={sendMessage}
                />
                <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>
                  <Feather name="send" size={22} color="#FFFFFF" />
                </TouchableOpacity>
              </View>
            </View>
          </KeyboardAvoidingView>
        </SafeAreaView>
      </Modal>
      
      <ScrollView style={styles.scrollView} contentContainerStyle={styles.content}>
        {/* Logo Container */}
        <View style={styles.logoContainer}>
          <Text style={styles.welcomeText}>Bem-vindo ao ScanPlant</Text>
          <Text style={styles.descriptionText}>
            Descubra o mundo das plantas com intelig√™ncia artificial
          </Text>
        </View>

        {/* Action Cards */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity style={styles.primaryCard} onPress={goToPhotoScreen}>
              <View style={styles.cardIcon}>
                <Text style={styles.cardIconText}>{Icons.identify}</Text>
              </View>
              <Text style={styles.primaryCardTitle}>Identificar Planta</Text>
              <Text style={styles.primaryCardSubtitle}>
                Tire uma foto e descubra informa√ß√µes detalhadas
              </Text>
            </TouchableOpacity>
  
            <View style={styles.secondaryCardsRow}>
              <TouchableOpacity 
                style={styles.secondaryCard} 
                onPress={() => {
                  navigation.navigate('PlantGallery', { initialMode: 'personal' });
                }}
              >
                <View style={styles.secondaryCardIcon}>
                  <Text style={styles.secondaryCardIconText}>üå±</Text>
                </View>
                <Text style={styles.secondaryCardTitle}>Minhas Plantas</Text>
                <Text style={styles.secondaryCardSubtitle}>Sua cole√ß√£o</Text>
              </TouchableOpacity>
 
             <TouchableOpacity 
               style={styles.secondaryCard} 
               onPress={() => {
                 navigation.navigate('PlantGallery', { initialMode: 'community' });
               }}
             >
               <View style={styles.secondaryCardIcon}>
                 <Text style={styles.secondaryCardIconText}>üë•</Text>
               </View>
               <Text style={styles.secondaryCardTitle}>Comunidade</Text>
               <Text style={styles.secondaryCardSubtitle}>Plantas compartilhadas</Text>
             </TouchableOpacity>
           </View>
           
           <View style={styles.secondaryCardsRow}>
             <TouchableOpacity 
               style={styles.secondaryCard} 
               onPress={goToSearchScreen}
             >
               <View style={styles.secondaryCardIcon}>
                 <Text style={styles.secondaryCardIconText}>üîç</Text>
               </View>
               <Text style={styles.secondaryCardTitle}>Explorar</Text>
               <Text style={styles.secondaryCardSubtitle}>Buscar plantas</Text>
             </TouchableOpacity>

             <TouchableOpacity 
               style={[styles.secondaryCard, styles.newFeatureCard]} 
               onPress={() => navigation.navigate('ChatList')}
             >
               <View style={styles.badgeNew}>
                 <Text style={styles.badgeText}>NOVO</Text>
               </View>
               <View style={styles.secondaryCardIcon}>
                 <Text style={styles.secondaryCardIconText}>üí¨</Text>
               </View>
               <Text style={styles.secondaryCardTitle}>Chat</Text>
               <Text style={styles.secondaryCardSubtitle}>Converse com outros</Text>
             </TouchableOpacity>
           </View>
        </View>

        {/* Features */}
        <View style={styles.featuresContainer}>
          <Text style={styles.featuresTitle}>Recursos</Text>
          
          {/* Novos recursos */}
          <View style={styles.featureItem}>
            <Text style={[styles.featureIcon, styles.newFeatureHighlight]}>üí¨</Text>
            <View style={styles.featureContent}>
              <View style={styles.featureTitleContainer}>
                <Text style={styles.featureTitle}>Chat com a Comunidade</Text>
                <View style={styles.featureNewBadge}>
                  <Text style={styles.featureNewBadgeText}>NOVO</Text>
                </View>
              </View>
              <Text style={styles.featureDescription}>
                Converse com outros entusiastas de plantas sobre suas d√∫vidas
              </Text>
            </View>
          </View>
          
          <View style={styles.featureItem}>
            <Text style={[styles.featureIcon, styles.newFeatureHighlight]}>üîç</Text>
            <View style={styles.featureContent}>
              <View style={styles.featureTitleContainer}>
                <Text style={styles.featureTitle}>Explora√ß√£o Aprimorada</Text>
                <View style={styles.featureNewBadge}>
                  <Text style={styles.featureNewBadgeText}>NOVO</Text>
                </View>
              </View>
              <Text style={styles.featureDescription}>
                Interface melhorada para descobrir novas esp√©cies de plantas
              </Text>
            </View>
          </View>
          
          {/* Recursos existentes */}
          <View style={styles.featureItem}>
            <Text style={styles.featureIcon}>{Icons.leaf}</Text>
            <View style={styles.featureContent}>
              <Text style={styles.featureTitle}>Identifica√ß√£o Precisa</Text>
              <Text style={styles.featureDescription}>
                IA avan√ßada para identificar milhares de esp√©cies
              </Text>
            </View>
          </View>

          <View style={styles.featureItem}>
            <Text style={styles.featureIcon}>{Icons.location}</Text>
            <View style={styles.featureContent}>
              <Text style={styles.featureTitle}>Localiza√ß√£o GPS</Text>
              <Text style={styles.featureDescription}>
                Registre onde encontrou cada planta
              </Text>
            </View>
          </View>

          <View style={styles.featureItem}>
            <Text style={styles.featureIcon}>{Icons.save}</Text>
            <View style={styles.featureContent}>
              <Text style={styles.featureTitle}>Cole√ß√£o Pessoal</Text>
              <Text style={styles.featureDescription}>
                Mantenha um registro de suas descobertas
              </Text>
            </View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    ...BaseStyles.container,
  },
  
  // Estilo para o header com logo, assistente e bot√£o de perfil
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: Spacing.lg,
    paddingVertical: Spacing.md,
    backgroundColor: Colors.background.primary,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border.light,
  },
  
  smallLogo: {
    width: 110,
    height: 60,
    resizeMode: 'contain',
  },
  
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  assistantButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(83, 177, 117, 0.92)',
    paddingHorizontal: Spacing.md,
    paddingVertical: Spacing.sm,
    borderRadius: 22,
    marginRight: Spacing.md,
    ...Shadows.lg,
    borderWidth: 1.5,
    borderColor: '#A0E5B2',
    elevation: 4,
  },
  
  assistantIconBackground: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.25)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1.5,
    borderColor: 'rgba(255, 255, 255, 0.5)',
  },
  
  assistantIcon: {
    fontSize: 18,
    textShadowColor: 'rgba(0, 0, 0, 0.1)',
    textShadowOffset: { width: 1, height: 1 },
    textShadowRadius: 1,
  },
  
  assistantText: {
    ...Typography.styles.button,
    color: '#FFFFFF',
    marginLeft: 8,
    fontWeight: 'bold',
    fontSize: Typography.fontSize.md,
    letterSpacing: 0.3,
    textShadowColor: 'rgba(0, 0, 0, 0.2)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  
  profileButton: {
    width: 40,
    height: 40,
    borderRadius: BorderRadius.full,
    backgroundColor: Colors.primary[100],
    justifyContent: 'center',
    alignItems: 'center',
    ...Shadows.md,
  },
  
  // Estilos para o modal do chat
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.4)',
  },
  
  keyboardAvoid: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  
  chatContainer: {
    height: '80%',
    backgroundColor: Colors.background.primary,
    borderTopLeftRadius: BorderRadius['2xl'],
    borderTopRightRadius: BorderRadius['2xl'],
    overflow: 'hidden',
    ...Shadows.xl,
  },
  
  chatHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: Spacing.lg,
    paddingVertical: Spacing.lg,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(83, 177, 117, 0.2)',
    backgroundColor: 'rgba(245, 250, 247, 0.95)',
    borderTopLeftRadius: BorderRadius['2xl'],
    borderTopRightRadius: BorderRadius['2xl'],
  },
  
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  chatAvatarContainer: {
    width: 45,
    height: 45,
    borderRadius: 22.5,
    backgroundColor: 'rgba(83, 177, 117, 0.15)',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: Spacing.md,
    borderWidth: 1.5,
    borderColor: 'rgba(83, 177, 117, 0.5)',
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  
  plantIcon: {
    fontSize: 24,
  },
  
  headerTitle: {
    ...Typography.styles.bodyMedium,
    color: 'rgba(50, 120, 80, 1)',
    fontWeight: 'bold',
    fontSize: Typography.fontSize.lg,
    letterSpacing: 0.2,
  },
  
  headerSubtitle: {
    ...Typography.styles.small,
    color: 'rgba(83, 177, 117, 0.8)',
    fontStyle: 'italic',
  },
  
  closeButton: {
    padding: Spacing.sm,
    borderRadius: BorderRadius.full,
    backgroundColor: Colors.neutral[100],
  },
  
  messageList: {
    padding: Spacing.lg,
    flexGrow: 1,
  },
  
  messageBubble: {
    maxWidth: '80%',
    padding: Spacing.md,
    borderRadius: BorderRadius.lg,
    marginBottom: Spacing.md,
  },
  
  userMessage: {
    alignSelf: 'flex-end',
    backgroundColor: 'rgba(83, 177, 117, 0.9)',
    borderBottomRightRadius: BorderRadius.sm,
    borderTopLeftRadius: BorderRadius.xl,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  
  botMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#F5F9F6',
    borderBottomLeftRadius: BorderRadius.sm,
    borderTopRightRadius: BorderRadius.xl,
    borderWidth: 1,
    borderColor: 'rgba(83, 177, 117, 0.2)',
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 1,
  },
  
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  
  userMessageText: {
    color: Colors.text.inverse,
  },
  
  botMessageText: {
    color: Colors.text.primary,
  },
  
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: Spacing.md,
    borderTopWidth: 1,
    borderTopColor: Colors.neutral[100],
  },
  
  textInput: {
    flex: 1,
    padding: Spacing.md,
    paddingVertical: Platform.OS === 'ios' ? Spacing.md : Spacing.sm,
    backgroundColor: Colors.neutral[50],
    borderRadius: BorderRadius.lg,
    maxHeight: 100,
    ...Typography.styles.body,
  },
  
  sendButton: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: 'rgba(83, 177, 117, 0.9)',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: Spacing.sm,
    borderWidth: 1.5,
    borderColor: '#A0E5B2',
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  
  profileIcon: {
    fontSize: Typography.fontSize.xl,
    color: Colors.primary[600],
  },
  
  scrollView: {
    flex: 1,
    backgroundColor: Colors.background.primary,
  },
  
  content: {
    paddingHorizontal: Spacing.lg,
    paddingBottom: Spacing['3xl'],
  },
  
  logoContainer: {
    alignItems: 'center',
    paddingTop: Spacing.xl,
    paddingBottom: Spacing['2xl'],
    paddingHorizontal: Spacing.lg,
  },
  
  welcomeText: {
    ...Typography.styles.h2,
    textAlign: 'center',
    marginBottom: Spacing.sm,
  },
  
  descriptionText: {
    ...Typography.styles.caption,
    textAlign: 'center',
    maxWidth: 280,
  },
  
  actionsContainer: {
    marginBottom: Spacing['2xl'],
  },
  
  primaryCard: {
    backgroundColor: Colors.primary[500],
    borderRadius: BorderRadius.xl,
    padding: Spacing.xl,
    alignItems: 'center',
    marginBottom: Spacing.lg,
    ...Shadows.xl,
    borderWidth: 1,
    borderColor: Colors.primary[400],
  },
  
  cardIcon: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: Colors.primary[400],
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: Spacing.lg,
    ...Shadows.md,
    borderWidth: 2,
    borderColor: Colors.primary[300],
  },
  
  cardIconText: {
    fontSize: 28,
  },
  
  primaryCardTitle: {
    ...Typography.styles.h3,
    color: Colors.text.inverse,
    marginBottom: Spacing.sm,
  },
  
  primaryCardSubtitle: {
    ...Typography.styles.body,
    color: Colors.primary[100],
    textAlign: 'center',
  },
  
  secondaryCardsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: Spacing.md, // Reduzindo espa√ßo vertical entre as linhas de cards
  },
  
  secondaryCard: {
    flex: 1,
    backgroundColor: Colors.background.primary,
    borderRadius: BorderRadius.xl,
    padding: Spacing.md,
    alignItems: 'center',
    marginHorizontal: Spacing.xs/2, // Reduzindo espa√ßo horizontal entre os cards
    ...Shadows.lg,
    borderWidth: 1,
    borderColor: Colors.primary[100],
    minHeight: 130,
  },
  
  secondaryCardIcon: {
    width: 55,
    height: 55,
    borderRadius: 27.5,
    backgroundColor: Colors.primary[100],
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: Spacing.sm,
    ...Shadows.sm,
    borderWidth: 1.5,
    borderColor: Colors.primary[300],
  },
  
  secondaryCardIconText: {
    fontSize: 24,
  },
  
  secondaryCardTitle: {
    ...Typography.styles.bodyMedium,
    marginBottom: Spacing.xs,
    textAlign: 'center',
  },
  
  secondaryCardSubtitle: {
    ...Typography.styles.small,
    textAlign: 'center',
  },
  
  featuresContainer: {
    backgroundColor: Colors.background.primary,
    borderRadius: BorderRadius.xl,
    padding: Spacing.xl,
    ...Shadows.lg,
    borderWidth: 1,
    borderColor: Colors.primary[100],
    marginTop: Spacing.md,
  },
  
  featuresTitle: {
    ...Typography.styles.h3,
    marginBottom: Spacing.lg,
  },
  
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Spacing.lg,
  },
  
  featureIcon: {
    fontSize: 24,
    marginRight: Spacing.md,
    width: 32,
    textAlign: 'center',
  },
  
  featureContent: {
    flex: 1,
  },
  
  featureTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Spacing.xs,
  },
  
  featureTitle: {
    ...Typography.styles.bodyMedium,
    marginRight: Spacing.sm,
  },
  
  featureDescription: {
    ...Typography.styles.caption,
  },
  
  newFeatureHighlight: {
    backgroundColor: Colors.primary[50],
    borderRadius: BorderRadius.full,
    width: 40,
    height: 40,
    textAlign: 'center',
    lineHeight: 40,
    color: Colors.primary[700],
  },
  
  featureNewBadge: {
    backgroundColor: Colors.primary[500],
    paddingHorizontal: Spacing.xs,
    paddingVertical: 2,
    borderRadius: BorderRadius.full,
  },
  
  featureNewBadgeText: {
    ...Typography.styles.captionBold,
    color: Colors.white,
    fontSize: 8,
  },
  
  // Estilos para o novo recurso de chat
  newFeatureCard: {
    borderWidth: 2,
    borderColor: Colors.primary[400],
    position: 'relative',
    overflow: 'visible',
  },
  
  badgeNew: {
    position: 'absolute',
    top: -10,
    right: -10,
    backgroundColor: Colors.primary[500],
    paddingHorizontal: Spacing.sm,
    paddingVertical: Spacing.xs / 2,
    borderRadius: BorderRadius.full,
    zIndex: 1,
    ...Shadows.small,
  },
  
  badgeText: {
    ...Typography.styles.captionBold,
    color: Colors.white,
    fontSize: 10,
    letterSpacing: 0.5,
  },
  
  // Estilos para a se√ß√£o de novidades
  newFeaturesSection: {
    marginBottom: Spacing.xl,
    backgroundColor: Colors.background.secondary,
    borderRadius: BorderRadius.xl,
    padding: Spacing.lg,
  },
  
  newFeaturesTitle: {
    ...Typography.styles.h2,
    color: Colors.primary[700],
    marginBottom: Spacing.md,
    textAlign: 'center',
  },
  
  newFeaturesList: {
    marginTop: Spacing.md,
  },
  
  newFeatureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.white,
    padding: Spacing.md,
    borderRadius: BorderRadius.lg,
    marginBottom: Spacing.md,
    ...Shadows.small,
  },
  
  newFeatureIcon: {
    fontSize: 24,
    marginRight: Spacing.md,
    width: 40,
    height: 40,
    textAlign: 'center',
    lineHeight: 40,
    backgroundColor: Colors.primary[50],
    borderRadius: BorderRadius.full,
    overflow: 'hidden',
  },
  
  newFeatureContent: {
    flex: 1,
  },
  
  newFeatureTitle: {
    ...Typography.styles.bodyBold,
    color: Colors.text.primary,
    marginBottom: Spacing.xs / 2,
  },
  
  newFeatureDescription: {
    ...Typography.styles.caption,
    color: Colors.text.secondary,
  },
});

export default HomeScreen;
